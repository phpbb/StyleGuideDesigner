'use strict';

var postcss = require('postcss');

var affectedProps = require('./affected-props');

var _require = require('./options'),
    validateOptions = _require.validateOptions;

var _require2 = require('./keyframes'),
    isKeyframeRule = _require2.isKeyframeRule,
    isKeyframeAlreadyProcessed = _require2.isKeyframeAlreadyProcessed,
    isKeyframeSymmetric = _require2.isKeyframeSymmetric,
    rtlifyKeyframe = _require2.rtlifyKeyframe;

var _require3 = require('./rules'),
    getDirRule = _require3.getDirRule,
    processSrcRule = _require3.processSrcRule;

var _require4 = require('./decls'),
    rtlifyDecl = _require4.rtlifyDecl,
    ltrifyDecl = _require4.ltrifyDecl;

var _require5 = require('./selectors'),
    isSelectorHasDir = _require5.isSelectorHasDir;

module.exports = postcss.plugin('postcss-rtl', function (options) {
    return function (css) {

        var keyframes = [];

        options = validateOptions(options);

        // collect @keyframes
        css.walkAtRules(function (rule) {
            if (!isKeyframeRule(rule)) return;
            if (isKeyframeAlreadyProcessed(rule)) return;
            if (isKeyframeSymmetric(rule)) return;

            keyframes.push(rule.params);
            rtlifyKeyframe(rule);
        });

        // Simple rules (includes rules inside @media-queries)
        css.walkRules(function (rule) {
            var ltrDecls = [];
            var rtlDecls = [];
            var dirDecls = [];

            if (isSelectorHasDir(rule.selector, options)) return;
            if (isKeyframeRule(rule.parent)) return;

            rule.walkDecls(function (decl) {
                var rtl = rtlifyDecl(decl, keyframes);

                if (rtl) {
                    ltrDecls.push(ltrifyDecl(decl, keyframes));
                    rtlDecls.push(decl.clone(rtl));
                    return;
                }

                if (affectedProps.indexOf(decl.prop) >= 0) {
                    dirDecls.push(decl);
                    decl.remove();
                }
            });

            if (rtlDecls.length) {
                var ltrDirRule = void 0;
                getDirRule(rule, 'rtl', options).append(rtlDecls);
                ltrDirRule = getDirRule(rule, 'ltr', options);
                ltrDecls.forEach(function (_decl) {
                    return _decl.moveTo(ltrDirRule);
                });
            }

            if (dirDecls.length) {
                getDirRule(rule, 'dir', options).append(dirDecls);
            }

            /* set dir attrs */
            processSrcRule(rule, options);
        });
        return false;
    };
});